#!/usr/bin/env bash
#
# Copyright (C) 2017-2018. Parth Bhatia (TheStrix) <parthbhatia98@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# source functions
source ~/.dotfiles/functions

grepdate() {
	UTCDATE=$(grep "ro.build.date.utc" $1 | awk -F '=' '{print $2}')
}

usage() {
	cat <<USAGE

Usage:
		bash $0 <OLD_DUMP_DIR> <NEW_ROM_FILE>

Examples: 	

OPTIONS:
	-h, --help
		Display this help message
USAGE
}

# Setup getopt.
long_opts="help"
getopt_cmd=$(getopt -o h --long "$long_opts" \
            -n $(basename $0) -- "$@") || \
            { echo -e "${yellow}\nERROR: Getopt failed. Extra args\n${nc}"; usage; exit 1;}

eval set -- "$getopt_cmd"

while true; do
    case "$1" in
        -h|--help) usage; exit 0;;
        --) shift; break;;
    esac
    shift
done

# Mandatory argument
if [ $# -lt 2 ]; then
    echo -e "${red}\nERROR: Missing mandatory arguments\n${nc}"
    usage
    exit 1
fi
if [ $# -gt 2 ]; then
    echo -e "${red}\nERROR: Extra inputs. Need <OLD_DUMP_DIR> & <NEW_ROM_FILE> only\n${nc}"
    usage
    exit 1
fi

OLD_DUMP_DIR=$1
NEW_ROM_FILE=$2

# Append _old to dir
cd $C_ANDROIDWORKDIR/dumps
mv $OLD_DUMP_DIR ${OLD_DUMP_DIR}_old

# Make a new dir with the new ROM file in it
mkdir $OLD_DUMP_DIR

# Unpack new ROM
unpackrom $NEW_ROM_FILE $OLD_DUMP_DIR

# Set the system path
if [[ -d $OLD_DUMP_DIR/system/system && -d ${OLD_DUMP_DIR}_old/system/system ]]; then
	SYSTEM_PATH="system/system"
else
	SYSTEM_PATH="system"
fi

if [[ -n $(grep "miui" $OLD_DUMP_DIR/$SYSTEM_PATH/build.prop) ]]; then
	# Store MIUI versions to append if diff file names
	OLD_VERSION=$(grep "ro.build.version.incremental" ${OLD_DUMP_DIR}_old/$SYSTEM_PATH/build.prop | awk -F '=' '{print $2}')
	echo -e "${lightpurple}Old MIUI version: $OLD_VERSION${nc}"
	NEW_VERSION=$(grep "ro.build.version.incremental" $OLD_DUMP_DIR/$SYSTEM_PATH/build.prop | awk -F '=' '{print $2}')
	echo -e "${lightpurple}New MIUI version: $NEW_VERSION${nc}"
else
	# Fetch OLD_VERSION & NEW_VERSION by grepping build date
	grepdate ${OLD_DUMP_DIR}_old/$SYSTEM_PATH/build.prop
	OLD_VERSION=$(date +%Y%m%d -d @$UTCDATE)
	echo -e "${lightpurple}Old version date: $OLD_VERSION${nc}"
	grepdate ${OLD_DUMP_DIR}/$SYSTEM_PATH/build.prop
	NEW_VERSION=$(date +%Y%m%d -d @$UTCDATE)
	echo -e "${lightpurple}New version date: $NEW_VERSION${nc}"
fi

# Check if any of the version is null
if [[ -z $OLD_VERSION ]]; then
	echo -e "${lightred}OLD_VERSION is NULL, exiting...${nc}"
	exit 1
elif [[ -z $NEW_VERSION ]]; then
	echo -e "${lightred}NEW_VERSION is NULL, exiting...${nc}"
	exit 1
fi

# Know the diff store path
TARGET=$(grep "ro.build.description" $OLD_DUMP_DIR/$SYSTEM_PATH/build.prop | awk -F '=|-' '{print $2}')
DIFFDIR=$C_OTHERSTUFFDIR/romdiff/$TARGET

# Create dir if not present
if [[ ! -e $DIFFDIR ]]; then
	echo -e "${yellow}Path not found, creating $DIFFDIR${nc}"
	mkdir -p $DIFFDIR
fi

# Copy old all_files.txt
cp ${OLD_DUMP_DIR}_old/all_files.txt $DIFFDIR/all_files-${OLD_VERSION}.txt

# Create systemvendor.diff
echo -e "${lightblue}Comparing two systems.\nOLD: ${OLD_DUMP_DIR}_old/$SYSTEM_PATH\nNEW: $OLD_DUMP_DIR/$SYSTEM_PATH${nc}"
diff -bur ${OLD_DUMP_DIR}_old/$SYSTEM_PATH $OLD_DUMP_DIR/$SYSTEM_PATH > $DIFFDIR/systemvendor_${OLD_VERSION}-${NEW_VERSION}.diff
# Because I use my own unpack script, I make a "vendor -> ../vendor" symlink in my extracted system dir, so no need to do this...
#if [[ -d ${OLD_DUMP_DIR}/vendor || -d ${OLD_DUMP_DIR}_old/vendor ]]; then
#	echo -e "${lightblue}Comparing two vendor.\nOLD: ${OLD_DUMP_DIR}_old/vendor\nNEW: $OLD_DUMP_DIR/vendor${nc}"
#	diff -bur ${OLD_DUMP_DIR}_old/vendor $OLD_DUMP_DIR/vendor >> $DIFFDIR/systemvendor_${OLD_VERSION}-${NEW_VERSION}.diff
#fi
echo -e "${lightgreen}Completed, diff stored at $DIFFDIR/systemvendor_${OLD_VERSION}-${NEW_VERSION}.diff\n${nc}"

# Create boot.diff
echo -e "${lightblue}Comparing two boot.\nOLD: ${OLD_DUMP_DIR}_old/bootimg\nNEW: $OLD_DUMP_DIR/bootimg${nc}"
diff -bur ${OLD_DUMP_DIR}_old/bootimg $OLD_DUMP_DIR/bootimg > $DIFFDIR/boot_${OLD_VERSION}-${NEW_VERSION}.diff
echo -e "${lightgreen}Completed, diff stored at $DIFFDIR/boot_${OLD_VERSION}-${NEW_VERSION}.diff\n${nc}"

echo -e "${yellow}Do you want to delete old dump? Y/N${nc}"
read choice
if [[ $choice = "y" || $choice = "Y" ]]; then
	rm -rf ${OLD_DUMP_DIR}_old
else
	exit 1
fi
