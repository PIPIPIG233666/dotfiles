#!/bin/bash
#
# Copyright (C) 2017. Parth Bhatia (TheStrix) <parthbhatia98@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Colors
black='\e[0;30m'
blue='\e[0;34m'
green='\e[0;32m'
cyan='\e[0;36m'
red='\e[0;31m'
purple='\e[0;35m'
brown='\e[0;33m'
lightgray='\e[0;37m'
darkgray='\e[1;30m'
lightblue='\e[1;34m'
lightgreen='\e[1;32m'
lightcyan='\e[1;36m'
lightred='\e[1;31m'
lightpurple='\e[1;35m'
yellow='\e[1;33m'
white='\e[1;37m'
nc='\e[0m'

# Source the custom bashrc
if [[ -f ~/.dotfiles/customrcadditions ]]; then
	source ~/.dotfiles/customrcadditions
else
	echo -e "${lightred}customrcadditions file not found, present in TheStrix's dotfiles.${nc}"
	exit 1
fi

usage() {
	cat <<USAGE

Usage:
		bash $0 <OLD_SUPERR_DIR> <NEW_ROM_FILE>

Examples: 	

OPTIONS:
	-h, --help
		Display this help message
USAGE
}

# Setup getopt.
long_opts="help"
getopt_cmd=$(getopt -o h --long "$long_opts" \
            -n $(basename $0) -- "$@") || \
            { echo -e "${yellow}\nERROR: Getopt failed. Extra args\n${nc}"; usage; exit 1;}

eval set -- "$getopt_cmd"

while true; do
    case "$1" in
        -h|--help) usage; exit 0;;
        --) shift; break;;
    esac
    shift
done

# Mandatory argument
if [ $# -lt 2 ]; then
    echo -e "${red}\nERROR: Missing mandatory arguments\n${nc}"
    usage
    exit 1
fi
if [ $# -gt 2 ]; then
    echo -e "${red}\nERROR: Extra inputs. Need <OLD_SUPERR_DIR> & <NEW_ROM_FILE> only\n${nc}"
    usage
    exit 1
fi

OLD_SUPERR_DIR=$1
NEW_ROM_FILE=$2

# Append _old to dir
cd $C_SUPERRDIR
mv $OLD_SUPERR_DIR ${OLD_SUPERR_DIR}_old

# Make a new superr dir with the new ROM file in it
mkdir $OLD_SUPERR_DIR

if [[ $NEW_ROM_FILE == *.zip ]]; then
	echo -e "${lightgreen}ZIP: $NEW_ROM_FILE${nc}"
	echo -e "${lightgreen}Moving zip file to $OLD_SUPERR_DIR${nc}"
	mv $NEW_ROM_FILE $OLD_SUPERR_DIR
elif [[ $NEW_ROM_FILE == *.tgz ]]; then
	echo -e "${lightgreen}TGZ: $NEW_ROM_FILE${nc}"
	mkdir -p $HOME/.reallytemp
	echo -e "${lightcyan}Extracting tgz firmware file${nc}"
	tar -xzvf $NEW_ROM_FILE -C $HOME/.reallytemp
	echo -e "${lightcyan}Copying system.img to $OLD_SUPERR_DIR${nc}"
	cp $HOME/.reallytemp/*/images/system.img $OLD_SUPERR_DIR
	echo -e "${lightcyan}Copying boot.img to $OLD_SUPERR_DIR${nc}"
	cp $HOME/.reallytemp/*/images/boot.img $OLD_SUPERR_DIR
	rm -rf $HOME/.reallytemp
	echo -e "${lightgreen}Moving tgz file to $OLD_SUPERR_DIR${nc}"
	mv $NEW_ROM_FILE $OLD_SUPERR_DIR
else
	echo -e "${lightred}Only zip/tgz are supported${nc}"
	exit 1
fi

# Launch superr and user has to manually unpack it here
cd ${C_SUPERRDIR} && ./superr

echo -e "${yellow}Deleting system.img from $OLD_SUPERR_DIR as it's extracted${nc}"
rm $OLD_SUPERR_DIR/system.img

echo -e "${lightgreen}Unpacking boot.img to 'bootimg'${nc}"
bootaik $OLD_SUPERR_DIR/boot.img $OLD_SUPERR_DIR/bootimg

# Store MIUI versions to append if diff file names
OLD_MIUI_VERSION=$(grep "ro.build.version.incremental" ${OLD_SUPERR_DIR}_old/system/build.prop | awk -F '=' '{print $2}')
echo -e "${lightpurple}Old MIUI version: $OLD_MIUI_VERSION${nc}"
NEW_MIUI_VERSION=$(grep "ro.build.version.incremental" $OLD_SUPERR_DIR/system/build.prop | awk -F '=' '{print $2}')
echo -e "${lightpurple}New MIUI version: $NEW_MIUI_VERSION${nc}"

# Know the diff store path
TARGET=$(grep "ro.build.description" $OLD_SUPERR_DIR/system/build.prop | awk -F '=|-' '{print $2}')
DIFFDIR=$C_MIDEVDIR/miuidiff/$TARGET

# Create dir if not present
if [[ ! -e $DIFFDIR ]]; then
	echo -e "${yellow}Path not found, creating $DIFFDIR${nc}"
	mkdir -p $DIFFDIR
fi

# Copy old all_files.txt
cp ${OLD_SUPERR_DIR}_old/00_project_files/all_files.txt $DIFFDIR/all_files-${OLD_MIUI_VERSION}.txt

# Create system.diff
echo -e "${lightblue}Comparing two systems.\nOLD: ${OLD_SUPERR_DIR}_old/system\nNEW: $OLD_SUPERR_DIR/system${nc}"
diff -bur ${OLD_SUPERR_DIR}_old/system $OLD_SUPERR_DIR/system > $DIFFDIR/system_${OLD_MIUI_VERSION}-${NEW_MIUI_VERSION}.diff
echo -e "${lightgreen}Completed, diff stored at $DIFFDIR/system_${OLD_MIUI_VERSION}-${NEW_MIUI_VERSION}.diff\n${nc}"

# Create boot.diff
echo -e "${lightblue}Comparing two boot.\nOLD: ${OLD_SUPERR_DIR}_old/bootimg\nNEW: $OLD_SUPERR_DIR/bootimg${nc}"
sudo diff -bur ${OLD_SUPERR_DIR}_old/bootimg $OLD_SUPERR_DIR/bootimg > $DIFFDIR/boot_${OLD_MIUI_VERSION}-${NEW_MIUI_VERSION}.diff
echo -e "${lightgreen}Completed, diff stored at $DIFFDIR/boot_${OLD_MIUI_VERSION}-${NEW_MIUI_VERSION}.diff\n${nc}"

echo -e "${yellow}Do you want to delete old superr dump? Y/N${nc}"
read choice
if [[ $choice = "y" || $choice = "Y" ]]; then
	sudo rm -rf ${OLD_SUPERR_DIR}_old
else
	exit 1
fi
