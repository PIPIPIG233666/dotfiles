#!/bin/bash

# COLORS
lightgreen='\e[1;32m'
red='\e[0;31m'
yellow='\e[1;33m'
nc='\e[0m'

usage() {
	cat <<USAGE

Usage:
		bash $0 <DEVICE_NAME> [OPTIONS]

Examples: 	adblog 1 -l
		Dir is: /work/Android/logs/kenzo
		File is: /work/Android/logs/kenzo/log.txt

		adblog kenzo -l
		Dir is: /work/Android/logs/kenzo
		File is: /work/Android/logs/kenzo/log.txt

		adblog 1 -d -o
		Log dmesg (-d) and open (-o)

OPTIONS:
	-h, --help
		Display this help message

	-l, --logcat
		Take logcat of events till that time and stop.

	-c, --lcont
		Take live logcat of events (Quit by pressing Ctrl + C/Z). Also -o won't work with it.

	-d, --dmesg
		Take dmesg

	-n, --denial
		Take SELinux denials (greps denials from dmesg)

	-r, --radio
		Take radio log

	-o, --open
		Open the logged files (Default: subl, if no subl opens in nano)

	-s, --suffix
		Add suffix to the end of the logged file name (To prevent file overwrite)


USAGE
}

# Setup getopt.
long_opts="help,logcat,lcont,dmesg,denial,radio,ramoops,open,suffix:"
getopt_cmd=$(getopt -o hlcdnros: --long "$long_opts" \
            -n $(basename $0) -- "$@") || \
            { echo -e "${yellow}\nERROR: Getopt failed. Extra args\n${nc}"; usage; exit 1;}

eval set -- "$getopt_cmd"

while true; do
    case "$1" in
        -h|--help) usage; exit 0;;
        -l|--logcat) LOGCAT="true";;
		-c|--lcont) LOGCAT="true"; LC="true";;
		-d|--dmesg) DMESG="true";;
		-n|--denial) DENIAL="true";;
		-r|--radio) RADIO="true";;
		--ramoops) RAMOOPS="true";;
		-o|--open) OPEN="true";;
        -s|--suffix) SUFFIX="$2"; shift;;
        --) shift; break;;
    esac
    shift
done

# Mandatory argument
if [ $# -eq 0 ]; then
    echo -e "${red}\nERROR: Missing mandatory argument: TARGET\n${nc}"
    usage
    exit 1
fi
if [ $# -gt 1 ]; then
    echo -e "${red}\nERROR: Extra inputs. Need TARGET only\n${nc}"
    usage
    exit 1
fi
if [[ $1 = "1" ]]; then
	TARGET="kenzo"; shift
elif [[ $1 = "2" ]]; then
	TARGET="hydrogen"; shift
elif [[ $1 = "3" ]]; then
	TARGET="sagit"; shift
elif [[ $1 = "4" ]]; then
	TARGET="land"; shift
else
	TARGET="$1"; shift
fi
if [[ "$(mount | grep work)" ]]; then
	DIR=/work/Android/logs/$TARGET
else
	DIR=$HOME/logs/$TARGET
fi

if [[ ! -e  $DIR ]]; then
	mkdir -p $DIR
fi

# Logcat
if [ "$LOGCAT" = "true" ]; then
	if [[ -n "$SUFFIX" ]]; then
		LOGCFILE="$DIR/log$SUFFIX.txt"
	else
		LOGCFILE=$DIR/log.txt
	fi
	if [[ "$LC" = "true" ]]; then
		while [[ $(adb devices | tail -2 | head -1 | cut -f 2 | sed 's/ *$//g') != "device" ]]; do
			sleep 0.8
		done
		echo -e "${yellow}Logcat started...${nc}"
		adb shell logcat > $LOGCFILE
	else
		adb shell logcat -d > $LOGCFILE
	fi
fi

# Dmesg
if [ "$DMESG" = "true" ]; then
	if [[ -n "$SUFFIX" ]]; then
		DMFILE="$DIR/dm$SUFFIX.txt"
	else
		DMFILE=$DIR/dm.txt
	fi
	adb root && adb wait-for-device remount
	adb shell dmesg > $DMFILE
fi

# Denials
if [ "$DENIAL" = "true" ]; then
	if [[ -n "$SUFFIX" ]]; then
		DENFILE="$DIR/denial$SUFFIX.txt"
	else
		DENFILE=$DIR/denial.txt
	fi
	adb shell dmesg | grep -a 'avc: ' > $DENFILE
fi

# Radio Logcat
if [ "$RADIO" = "true" ]; then
	if [[ -n "$SUFFIX" ]]; then
		RADFILE="$DIR/radio$SUFFIX.txt"
	else
		RADFILE=$DIR/radio.txt
	fi
	adb shell logcat -b radio > $RADFILE
fi

# Console ramoops
if [ "$RAMOOPS" = "true" ]; then
	if [[ "$TARGET" = "kenzo" || "$TARGET" = "hydrogen" || "$TARGET" = "sagit" ]]; then
		RAMF="/sys/fs/pstore/console-ramoops-0"
		RAMFILE="$DIR/console-ramoops-0"
	else
		RAMF="/sys/fs/pstore/console-ramoops"
		RAMFILE="$DIR/console-ramoops"
	fi
	adb wait-for-device root
	adb wait-for-device remount
	cd $DIR
	adb pull $RAMF
fi

# Use subl text editor if present, otherwise nano
if [[ $(which subl) != "" ]]; then
	EDITOR=subl
else
	EDITOR=nano
fi

# Open logged files
if [[ "$OPEN" = "true" ]]; then
	if [[ "$LOGCAT" = "true" ]]; then
		$EDITOR $LOGCFILE
	fi
	if [[ "$DMESG" = "true" ]]; then
		$EDITOR $DMFILE
	fi
	if [[ "$DENIAL" = "true" ]]; then
		$EDITOR $DENFILE
	fi
	if [[ "$RADIO" = "true" ]]; then
		$EDITOR $RADFILE
	fi
	if [[ "$RAMOOPS" = "true" ]]; then
		$EDITOR $RAMFILE
	fi
fi

#echo -e "${lightgreen}Dir is: $DIR${nc}"
#echo -e "${lightgreen}File is: $FILE${nc}"
