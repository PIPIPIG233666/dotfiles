#!/bin/bash
#
# Copyright (c) 2012, The Linux Foundation. All rights reserved.
# Copyright (C) 2017. Parth Bhatia (TheStrix) <parthbhatia98@gmail.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

set -o errexit

usage() {
cat <<USAGE

Usage:
    bash $0 <TARGET_PRODUCT> [OPTIONS]

Description:
    "cd" to your ROM source directory first.
    Builds Android tree for given TARGET_PRODUCT

OPTIONS:
    -c, --clean_build
        Clean build - build from scratch by removing entire out dir

    -cc, --cleanccache
        Clean ccache - clean ccache for device mentioned

    -u, --upload
        Upload build - upload build to my gdrive

    -r, --release
        Upload build - upload build to my gdrive

    -d, --debug
        Enable debugging - captures all commands while doing the build

    -h, --help
        Display this help message

    -i, --image
        Specify image to be build/re-build (bootimg/sysimg/usrimg)

    -j, --jobs
        Specifies the number of jobs to run simultaneously (Default: 8)

    -k, --kernel_defconf
        Specify defconf file to be used for compiling Kernel

    -l, --log
        Log file to store build logs (<TARGET_PRODUCT>.log)

    -m, --module
        Module to be build

    -p, --project
        Project to be build

    -s, --setup_ccache
        Set CCACHE for faster incremental builds (true/false - Default: true)

    -a, --update-api
        Update APIs

    -v, --build_variant
        Build variant (Default: userdebug)

USAGE
}

clean_build() {
    echo -e "${yellow}\nINFO: Removing entire out dir. . .\n${nc}"
    make clobber
}

build_android() {
    echo -e "${yellow}\nINFO: Build Android tree for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      make $@ | tee $LOG_FILE.log
    else
      make $@
    fi
}

build_bootimg() {
    echo -e "${yellow}\nINFO: Build bootimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      make bootimage $@ | tee $LOG_FILE.log
    else
      make bootimage $@
    fi
}

build_recoveryimg() {
    echo -e "${yellow}\nINFO: Build recoveryimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      make recoveryimage $@ | tee $LOG_FILE.log
    else
      make recoveryimage $@
    fi
}

build_sysimg() {
    echo -e "${yellow}\nINFO: Build systemimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      make systemimage $@ | tee $LOG_FILE.log
    else
      make systemimage $@
    fi
}

build_usrimg() {
    echo -e "${yellow}\nINFO: Build userdataimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      make userdataimage $@ | tee $LOG_FILE.log
    else
      make userdataimage $@
    fi
}

build_module() {
    echo -e "${yellow}\nINFO: Build $MODULE for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      make $MODULE $@ | tee $LOG_FILE.log
    else
      make $MODULE $@
    fi
}

build_project() {
    echo -e "\nINFO: Build $PROJECT for $TARGET\n"
    if [ "$LOG" = "true" ]; then
      mmm $PROJECT | tee $LOG_FILE.log
    else
      mmm $PROJECT
    fi
}

update_api() {
    echo -e "\nINFO: Updating APIs\n"
    if [ "$LOG" = "true" ]; then
      make update-api | tee $LOG_FILE.log
    else
      make update-api
    fi
}

# CCACHE
KENZOCCACHE=$HOME/.kenzoccache/
HYDROGENCCACHE=$HOME/.hydrogenccache/

setup_kenzoccache() {
  export CCACHE_DIR=$KENZOCCACHE
  export USE_CCACHE=1
}

setup_hydrogenccache() {
  export CCACHE_DIR=$HYDROGENCCACHE
  export USE_CCACHE=1
}

delete_kenzoccache() {
    prebuilts/misc/linux-x86/ccache/ccache -C
    rm -rf $KENZOCCACHE
}

delete_hydrogenccache() {
    prebuilts/misc/linux-x86/ccache/ccache -C
    rm -rf $HYDROGENCCACHE
}

create_kenzoccache() {
    echo -e "${yellow}\nINFO: Setting kenzo CCACHE with 25 GB\n${nc}"
    cd $LINEAGEDIR
    setup_kenzoccache
    delete_kenzoccache
    prebuilts/misc/linux-x86/ccache/ccache -M 25G
}

create_hydrogenccache() {
    echo -e "${yellow}\nINFO: Setting hydrogen CCACHE with 25 GB\n${nc}"
    cd $LINEAGEDIR
    setup_hydrogenccache
    delete_hydrogenccache
    prebuilts/misc/linux-x86/ccache/ccache -M 25G
}

if [[ ! -e $KENZOCCACHE ]]; then
  echo "${yellow}Kenzo CCACHE dir $KENZOCCACHE not found... Creating and setting it up!${nc}"
  mkdir $KENZOCCACHE
  create_kenzoccache
fi

if [[ ! -e $HYDROGENCCACHE ]]; then
  echo "${yellow}hydrogen CCACHE dir $HYDROGENCCACHE not found... Creating and setting it up!${nc}"
  mkdir $HYDROGENCCACHE
  create_hydrogenccache
fi

# Set defaults
VARIANT="userdebug"
JOBS=64
CCACHE="true"
CURDIR=${PWD##*/}

# Setup getopt.
long_opts="clean_build,clean_ccache,upload,release,debug,help,image:,jobs:,kernel_defconf:,log,module:,"
long_opts+="project:,setup_ccache:,update-api,build_variant:"
getopt_cmd=$(getopt -o cccurdhi:j:k:lm:p:s:av: --long "$long_opts" \
            -n $(basename $0) -- "$@") || \
            { echo -e "${yellow}\nERROR: Getopt failed. Extra args\n${nc}"; usage; exit 1;}

eval set -- "$getopt_cmd"

while true; do
    case "$1" in
        -c|--clean_build) CLEAN_BUILD="true";;
        -cc|--clean_ccache) CLEAN_CCACHE="true";;
        -u|--upload) UPLOAD="true";;
        -r|--release) RELEASE="true";;
        -d|--debug) DEBUG="true";;
        -h|--help) usage; exit 0;;
        -i|--image) IMAGE="$2"; shift;;
        -j|--jobs) JOBS="$2"; shift;;
        -k|--kernel_defconf) DEFCONFIG="$2"; shift;;
        -l|--log) LOG="true";;
        -m|--module) MODULE="$2"; shift;;
        -p|--project) PROJECT="$2"; shift;;
        -a|--update-api) UPDATE_API="true";;
        -s|--setup_ccache) CCACHE="$2"; shift;;
        -v|--build_variant) VARIANT="$2"; shift;;
        --) shift; break;;
    esac
    shift
done

# Mandatory argument
if [ $# -eq 0 ]; then
    echo -e "\nERROR: Missing mandatory argument: TARGET_PRODUCT\n"
    usage
    exit 1
fi
if [ $# -gt 1 ]; then
    echo -e "\nERROR: Extra inputs. Need TARGET_PRODUCT only\n"
    usage
    exit 1
fi
TARGET="$1"; shift

if [ "$LOG" = "true" ]; then
    LOG_FILE=$TARGET
fi

CMD="-j $JOBS"
if [ "$DEBUG" = "true" ]; then
    CMD+=" showcommands"
fi
if [ -n "$DEFCONFIG" ]; then
    CMD+=" KERNEL_DEFCONFIG=$DEFCONFIG"
fi

if [ "$CCACHE" = "true" ]; then
  if [[ "$TARGET" = "kenzo" ]];
  then
    echo "${yellow}Setting up kenzo CCACHE dir $KENZOCCACHE${nc}"
    setup_kenzoccache
  fi
  if [[ "$TARGET" = "hydrogen" ]];
  then
    echo "${yellow}Setting up hydrogen CCACHE dir $HYDROGENCCACHE${nc}"
    setup_hydrogenccache
  fi
fi

source build/envsetup.sh
if [[ "$CURDIR" = "lineage" ]]; then
lunch lineage_$TARGET-$VARIANT
elif [[ "$CURDIR" = "omni" ]]; then
lunch omni_$TARGET-$VARIANT
elif [[ "$CURDIR" = "aicp" ]]; then
lunch aicp_$TARGET-$VARIANT
elif [[ "$CURDIR" = "pa" ]]; then
lunch pa_$TARGET-$VARIANT
else
lunch aosp_$TARGET-$VARIANT
fi

if [ "$CLEAN_BUILD" = "true" ]; then
    clean_build
fi

if [ "$CLEAN_CCACHE" = "true" ]; then
  if [[ "$TARGET" =~ "kenzo" ]];
  then
    echo "${yellow}Clearing kenzo CCACHE dir $KENZOCCACHE${nc}"
    delete_kenzoccache
  fi
  if [[ "$TARGET" =~ "hydrogen" ]];
  then
    echo "${yellow}Clearing hydrogen CCACHE dir $HYDROGENCCACHE${nc}"
    delete_hydrogenccache
  fi
fi

if [ "$UPDATE_API" = "true" ]; then
    update_api
    exit 0
fi

if [ -n "$MODULE" ]; then
    build_module "$CMD"
    exit 0
fi

if [ -n "$PROJECT" ]; then
    build_project
    exit 0
fi

if [ -n "$IMAGE" ]; then
    build_$IMAGE "$CMD"
    exit 0
fi

build_android "$CMD"

echo "${yellow}KILLING JACK SERVER${nc}"
jack-kill

if [[ "$UPLOAD" = "true" ]]; then
  if [[ "$CURDIR" = "lineage" ]]; then
    if [[ "$TARGET" = "kenzo" ]]; then
      echo "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
      gdrive upload --parent 0B9JxQ_RHblHkQXBlM1BEcHNjOUU ${OUT}/lineage-*.zip
    elif [[ "$TARGET" = "hydrogen" ]]; then
      echo "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
      gdrive upload --parent 0B9JxQ_RHblHkU1IxaW1mTEVfMEE ${OUT}/lineage-*.zip
    else
      echo "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
      gdrive upload ${OUT}/lineage-*.zip
    fi
  else
    echo "${yellow}Upload configured only for LineageOS${nc}"
  fi
fi

if [[ "$RELEASE" = "true" ]]; then
  if [[ "$CURDIR" = "lineage" ]]; then
    afh ${OUT}/lineage-*.zip
  else
    echo "${yellow}Upload configured only for LineageOS${nc}"
  fi
fi
