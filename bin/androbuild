#!/usr/bin/env bash
#
# Copyright (c) 2012, The Linux Foundation. All rights reserved.
# Copyright (C) 2017-2018. Parth Bhatia (TheStrix) <parthbhatia98@gmail.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# source functions
source ~/.dotfiles/functions

#set -o errexit

usage() {
cat <<USAGE

Usage:
    bash $0 <TARGET_PRODUCT> [OPTIONS]

Description:
    "cd" to your ROM source directory first.
    Builds Android tree for given TARGET_PRODUCT

OPTIONS:
    -o, --outdir
    	Set out dir path

    -c, --clean_build
        Clean build - build from scratch by removing entire out dir

    -n, --dirty_build
        Dirty build - Use 'mka installclean'

    -t, --delete_ccache
        Delete ccache - clean ccache for device mentioned

    -u, --upload
        Upload build - upload build to my gdrive

    -r, --release
        Upload build - upload build to my afh

    -d, --debug
        Enable debugging - captures all commands while doing the build

    -h, --help
        Display this help message

    -i, --image
        Specify image to be build/re-build (bootimg/sysimg/usrimg)

    -j, --jobs
        Specifies the number of jobs to run simultaneously (Default: 16)

    -k, --kernel_defconf
        Specify defconf file to be used for compiling Kernel

    -l, --log
        Log file to store build logs (<TARGET_PRODUCT>.log)

    -m, --module
        Module to be build

    -p, --project
        Project to be build

    -s, --setup_ccache
        Set CCACHE for faster incremental builds (true/false - Default: true)

    -a, --update-api
        Update APIs

    -v, --build_variant
        Build variant (Default: userdebug)

    -x, --audit
        Use audit2allow to the denials present in speicified text (Note: $OUT/root/sepolicy required)

USAGE
}

clean_build() {
    echo -e "${yellow}\nINFO: Removing entire out dir. . .\n${nc}"
    ${MAKE} clobber $@
}

dirty_build() {
    echo -e "${yellow}\nINFO: Executing 'mka installclean'. . .\n${nc}"
    #echo -e "${yellow}\nDeleting $CURDIR/out/target/product/$TARGET/obj/KERNEL_OBJ\n${nc}"
    #rm -rf out/target/product/$TARGET/obj/KERNEL_OBJ
    ${MAKE} installclean $@
}

build_android() {
    echo -e "${yellow}\nINFO: Build Android tree for $TARGET\n${nc}"
    if [[ "$CURDIR" = "aosp" ]]; then
      if [ "$LOG" = "true" ]; then
        ${MAKE} otapackage $@ | tee $TARGET.log
      else
        ${MAKE} otapackage $@
      fi
    else
      if [ "$LOG" = "true" ]; then
        ${MAKE} bacon $@ | tee $TARGET.log
      else
        ${MAKE} bacon $@
      fi
    fi
}

build_bootimg() {
    echo -e "${yellow}\nINFO: Build bootimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      ${MAKE} bootimage $@ | tee $TARGET.log
    else
      ${MAKE} bootimage $@
    fi
}

build_recoveryimg() {
    echo -e "${yellow}\nINFO: Build recoveryimage for $TARGET\n${nc}"
    echo -e "${lightpurple}Please enter TW_DEVICE_VERSION: ${nc}"
    export ALLOW_MISSING_DEPENDENCIES=true
    read TW_DEVICE_VERSION
    echo -e "${lightpurple}Setting TW_DEVICE_VERSION=$TW_DEVICE_VERSION${nc}"
    export TW_DEVICE_VERSION=$TW_DEVICE_VERSION
    if [ "$LOG" = "true" ]; then
      ${MAKE} recoveryimage adbd $@ | tee $TARGET.log
    else
      ${MAKE} recoveryimage adbd $@
    fi
}

build_sysimg() {
    echo -e "${yellow}\nINFO: Build systemimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      ${MAKE} systemimage $@ | tee $TARGET.log
    else
      ${MAKE} systemimage $@
    fi
}

build_usrimg() {
    echo -e "${yellow}\nINFO: Build userdataimage for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      ${MAKE} userdataimage $@ | tee $TARGET.log
    else
      ${MAKE} userdataimage $@
    fi
}

build_module() {
    echo -e "${yellow}\nINFO: Build $MODULE for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      ${MAKE} $MODULE $@ | tee $TARGET.log
    else
      ${MAKE} $MODULE $@
    fi
}

build_project() {
    echo -e "${yellow}\nINFO: Build $PROJECT for $TARGET\n${nc}"
    if [ "$LOG" = "true" ]; then
      mmm $PROJECT | tee $TARGET.log
    else
      mmm $PROJECT
    fi
}

update_api() {
    echo -e "${yellow}\nINFO: Updating APIs\n${nc}"
    if [ "$LOG" = "true" ]; then
      ${MAKE} update-api | tee $TARGET.log
    else
      ${MAKE} update-api
    fi
}

# CCACHE
if [ "$(mount | grep work)" ]; then
  KENZOCCACHE=/work/Android/.kenzoccache/
  HYDROGENCCACHE=/work/Android/.hydrogenccache/
  SAGITCCACHE=/work/Android/.sagitccache/
  BERKELEYCCACHE=/work/Android/.berkeleyccache/
else
  KENZOCCACHE=$HOME/.kenzoccache/
  HYDROGENCCACHE=$HOME/.hydrogenccache/
  SAGITCCACHE=$HOME/.sagitccache/
  BERKELEYCCACHE=$HOME/.berkeleyccache/
fi


setup_kenzoccache() {
  export CCACHE_DIR=$KENZOCCACHE
  export USE_CCACHE=1
}

setup_hydrogenccache() {
  export CCACHE_DIR=$HYDROGENCCACHE
  export USE_CCACHE=1
}

setup_sagitccache() {
  export CCACHE_DIR=$SAGITCCACHE
  export USE_CCACHE=1
}

setup_berkeleyccache() {
  export CCACHE_DIR=$BERKELEYCCACHE
  export USE_CCACHE=1
}

delete_kenzoccache() {
    export CCACHE_DIR=$KENZOCCACHE
    ccache -C
}

delete_hydrogenccache() {
    export CCACHE_DIR=$HYDROGENCCACHE
    ccache -C
}

delete_sagitccache() {
  export CCACHE_DIR=$SAGITCCACHE
  ccache -C
}

delete_berkeleyccache() {
  export CCACHE_DIR=$BERKELEYCCACHE
  ccache -C
}

create_kenzoccache() {
    echo -e "${lightgreen}\nINFO: Setting kenzo CCACHE with 25 GB\n${nc}"
    setup_kenzoccache
    ccache -M 25G
}

create_hydrogenccache() {
    echo -e "${lightgreen}\nINFO: Setting hydrogen CCACHE with 25 GB\n${nc}"
    setup_hydrogenccache
    ccache -M 25G
}

create_sagitccache() {
  echo -e "${lightgreen}\nINFO: Setting sagit CCACHE with 25 GB\n${nc}"
    setup_sagitccache
    ccache -M 25G
}

create_berkeleyccache() {
  echo -e "${lightgreen}\nINFO: Setting berkeley CCACHE with 25 GB\n${nc}"
    setup_berkeleyccache
    ccache -M 25G
}

# Set defaults
VARIANT="userdebug"
if [[ $HOSTNAME = "build3.de.xda-developers.com" ]]; then
  CCACHE="false"
else
  CCACHE="true"
fi
CURDIR=${PWD##*/}

# Exports
export KBUILD_BUILD_USER=ParthB
export KBUILD_BUILD_HOST=Triton
export WITH_SU=true

# Setup getopt.
long_opts="outdir:,clean_build,dirty_build,delete_ccache,upload,release,debug,help,image:,jobs:,kernel_defconf:,log,module:,"
long_opts+="project:,setup_ccache:,update-api,build_variant:,audit:"
getopt_cmd=$(getopt -o o:cnturdhi:j:k:lm:p:s:av:x: --long "$long_opts" \
            -n $(basename $0) -- "$@") || \
            { echo -e "${lightred}\nERROR: Getopt failed. Extra args\n${nc}"; usage; exit 1;}

eval set -- "$getopt_cmd"

while true; do
    case "$1" in
    	-o|--outdir) export OUT_DIR="$2"; shift;;
        -c|--clean_build) CLEAN_BUILD="true";;
        -n|--dirty_build) DIRTY_BUILD="true";;
        -t|--delete_ccache) DELTE_CCACHE="true";;
        -u|--upload) UPLOAD="true";;
        -r|--release) RELEASE="true";;
        -d|--debug) DEBUG="true";;
        -h|--help) usage; exit 0;;
        -i|--image) IMAGE="$2"; shift;;
        -j|--jobs)
        if [[ "$2" -gt 0 ]]; then
            JOBS="$2"
        else
            echo -e "Please specify as value for jobs"
            exit 1
        fi
        shift;;
        -k|--kernel_defconf) DEFCONFIG="$2"; shift;;
        -l|--log) LOG="true";;
        -m|--module) MODULE="$2"; shift;;
        -p|--project) PROJECT="$2"; shift;;
        -a|--update-api) UPDATE_API="true";;
        -s|--setup_ccache) CCACHE="$2"; shift;;
        -v|--build_variant) VARIANT="$2"; shift;;
        -x|--audit) AUDIT="$2"; shift;;
        --) shift; break;;
    esac
    shift
done

# Mandatory argument
if [ $# -eq 0 ]; then
    echo -e "${lightred}\nERROR: Missing mandatory argument: TARGET_PRODUCT\n${nc}"
    usage
    exit 1
fi
if [ $# -gt 1 ]; then
    echo -e "${lightred}\nERROR: Extra inputs. Need TARGET_PRODUCT only\n${nc}"
    usage
    exit 1
fi
TARGET="$1"; shift

CMD=""
if [[ ! -z $JOBS ]]; then
  CMD+="-j$JOBS"
fi
if [ "$DEBUG" = "true" ]; then
    CMD+=" showcommands"
fi
if [ -n "$DEFCONFIG" ]; then
    CMD+=" KERNEL_DEFCONFIG=$DEFCONFIG"
fi

if [[ "$DELTE_CCACHE" = "true" ]]; then
  if [[ "$TARGET" = "kenzo" ]];
  then
    echo -e "${lightgreen}Clearing kenzo CCACHE dir $KENZOCCACHE${nc}"
    delete_kenzoccache
  fi
  if [[ "$TARGET" = "hydrogen" ]];
  then
    echo -e "${lightgreen}Clearing hydrogen CCACHE dir $HYDROGENCCACHE${nc}"
    delete_hydrogenccache
  fi
  if [[ "$TARGET" = "sagit" ]]; then
    echo -e "${lightgreen}Clearing sagit CCACHE dir $SAGITCCACHE${nc}"
    delete_sagitccache
  fi
  if [[ "$TARGET" = "berkeley" ]]; then
    echo -e "${lightgreen}Clearing berkeley CCACHE dir $BERKELEYCCACHE${nc}"
    delete_berkeleyccache
  fi
fi

if [[ "$TARGET" = "kenzo" ]]; then
  if [[ ! -e $KENZOCCACHE ]]; then
    echo -e "${lightgreen}Kenzo CCACHE dir $KENZOCCACHE not found... Creating and setting it up!${nc}"
    mkdir $KENZOCCACHE
    create_kenzoccache
  fi
fi

if [[ "$TARGET" = "hydrogen" ]]; then
  if [[ ! -e $HYDROGENCCACHE ]]; then
    echo -e "${lightgreen}hydrogen CCACHE dir $HYDROGENCCACHE not found... Creating and setting it up!${nc}"
    mkdir $HYDROGENCCACHE
    create_hydrogenccache
  fi
fi

if [[ "$TARGET" = "sagit" ]]; then
  if [[ ! -e $SAGITCCACHE ]]; then
    echo -e "${lightgreen}sagit CCACHE dir $SAGITCCACHE not found... Creating and setting it up!${nc}"
    mkdir $SAGITCCACHE
    create_sagitccache
  fi
fi

if [[ "$TARGET" = "berkeley" ]]; then
  if [[ ! -e $BERKELEYCCACHE ]]; then
    echo -e "${lightgreen}berkeley CCACHE dir $BERKELEYCCACHE not found... Creating and setting it up!${nc}"
    mkdir $BERKELEYCCACHE
    create_berkeleyccache
  fi
fi

if [ "$CCACHE" = "true" ]; then
  if [[ "$TARGET" = "kenzo" ]];
  then
    echo -e "${lightgreen}Setting up kenzo CCACHE dir $KENZOCCACHE${nc}"
    setup_kenzoccache
  fi
  if [[ "$TARGET" = "hydrogen" ]];
  then
    echo -e "${lightgreen}Setting up hydrogen CCACHE dir $HYDROGENCCACHE${nc}"
    setup_hydrogenccache
  fi
  if [[ "$TARGET" = "sagit" ]]; then
    echo -e "${lightgreen}Setting up sagit CCACHE dir $SAGITCCACHE${nc}"
    setup_sagitccache
  fi
  if [[ "$TARGET" = "berkeley" ]]; then
    echo -e "${lightgreen}Setting up berkeley CCACHE dir $BERKELEYCCACHE${nc}"
    setup_berkeleyccache
  fi
fi

venv

source build/envsetup.sh
if [[ "$CURDIR" = lineage* ]]; then
lunch lineage_$TARGET-$VARIANT
elif [[ "$CURDIR" = omni* ]]; then
lunch omni_$TARGET-$VARIANT
elif [[ "$CURDIR" = aicp* ]]; then
lunch aicp_$TARGET-$VARIANT
elif [[ "$CURDIR" = pa* ]]; then
lunch pa_$TARGET-$VARIANT
else
lunch aosp_$TARGET-$VARIANT
fi

if [[ "$(command -v 'mka')" ]]; then
  if [[ -z "${JOBS}" ]]; then
    MAKE="mka"
  else
    MAKE="make"
  fi
else
  MAKE="make"
fi

if [ "$CLEAN_BUILD" = "true" ]; then
    clean_build
fi

if [ "$DIRTY_BUILD" = "true" ]; then
    dirty_build
fi

if [ "$UPDATE_API" = "true" ]; then
    update_api
    exit 0
fi

START="$(date +%s)"
if [ -n "$MODULE" ]; then
    build_module "$CMD"
elif [ -n "$PROJECT" ]; then
    build_project
elif [ -n "$IMAGE" ]; then
    build_$IMAGE "$CMD"
elif [ -n "$AUDIT" ]; then
    echo -e "${lightblue}cat "$AUDIT" | audit2allow -p ${OUT}/root/sepolicy${nc}"
    cat "$AUDIT" | audit2allow -p ${OUT}/root/sepolicy
else
    build_android "$CMD"
fi
END="$(date +%s)"
format_time ${END} ${START}

# Kill jack if still running
if [[ ! -z $(prebuilts/sdk/tools/jack-admin list-server) ]]; then
	prebuilts/sdk/tools/jack-admin kill-server
fi

if [[ -d "/tmp/venv" ]]; then
    rmvenv
fi

# Upload to GDrive / AFH
if [[ "$UPLOAD" = "true" ]]; then
  if [[ "$IMAGE" == "bootimg" ]]; then
    echo -e "${yellow}Uploading boot.img to drive${nc}"
    gdrive upload --parent 1GAKzFhwEDC2LM-_iveXGMBUYoooQ1ud2 ${OUT}/boot.img
  else
    if [[ "$CURDIR" = lineage* ]]; then
      if [[ "$TARGET" = "kenzo" ]]; then
        echo -e "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
        gdrive upload --parent 0B9JxQ_RHblHkZWpaejlPNUtjVEk ${OUT}/lineage-*.zip
      elif [[ "$TARGET" = "hydrogen" ]]; then
        echo -e "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
        gdrive upload --parent 0B9JxQ_RHblHkU1IxaW1mTEVfMEE ${OUT}/lineage-*.zip
      elif [[ "$TARGET" = "sagit" ]]; then
        echo -e "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
        gdrive upload --parent 0B9JxQ_RHblHkemswTVRkTERYdXM ${OUT}/lineage-*.zip
      elif [[ "$TARGET" = "berkeley" ]]; then
        echo -e "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
        gdrive upload --parent 1ZguqcdEaU5DeOCryvF61bIni_nRn_HJR ${OUT}/lineage-*.zip
      else
        echo -e "${yellow}Uploading ${TARGET} LineageOS to drive${nc}"
        gdrive upload ${OUT}/lineage-*.zip
      fi
    elif [[ "$CURDIR" = pa* ]]; then
      if [[ "$TARGET" = "sagit" ]]; then
        echo -e "${yellow}Uploading ${TARGET} AOSPA to drive${nc}"
        gdrive upload --parent 0B9JxQ_RHblHkZHV1aFpxNUhzOUU ${OUT}/pa_*.zip
      else
        echo -e "${yellow}Uploading ${TARGET} AOSPA to drive${nc}"
        gdrive upload ${OUT}/pa_*.zip
      fi
    else
      echo -e "${yellow}Upload configured only for LineageOS & PA${nc}"
    fi
  fi
fi

if [[ "$RELEASE" = "true" ]]; then
  if [[ "$CURDIR" = lineage* ]]; then
    afh ${OUT}/lineage-*.zip
  else
    echo -e "${yellow}Upload configured only for LineageOS${nc}"
  fi
fi
echo -e ""
