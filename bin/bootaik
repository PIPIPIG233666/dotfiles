#!/bin/bash

# Colors
lightgreen='\e[1;32m'
lightcyan='\e[1;36m'
lightred='\e[1;31m'
nc='\e[0m'

usage() {
    cat <<USAGE

Usage:
    To unpack:
        bash $0 <IMAGE_FILE_PATH> <OUTPUT_DIR_PATH> -r
    To repack:
        bash $0 <UNPACKED_IMG_DIR> <OUTPUT_IMG_PATH> -u

Examples:
    $0 boot.img bootimg #Unpack boot.img to bootimg dir
    $0 bootimg boot.img #Repack bootimg to boot.img dir

OPTIONS:
    -h, --help
        Display this help message
    -u, --unpack
        Unpack img file
    -r, --repack
        Repack img

USAGE
}

# osm0sis's AIK path
if [[ -d $C_SUPERRDIR/tools/boot/AIK ]]; then
    AIK=$C_SUPERRDIR/tools/boot/AIK;
    echo -e "${lightcyan}\n Found AIK at $AIK\n${nc}";
elif [[ -d $C_ANDROIDWORKDIR/AIK ]]; then
    AIK=$C_ANDROIDWORKDIR/AIK;
    echo -e "${lightcyan}\n Found AIK at $AIK\n${nc}";
else
    echo -e "${lightred}\n ERROR: AIK not found!\n${nc}";
    echo -e "${lightred}\n Clone 'https://github.com/osm0sis/Android-Image-Kitchen/tree/AIK-Linux' to the correct path\n${nc}";
    exit 1;
fi

CURR_DIR=$(pwd);

boot_unpack() {
    if [[ ! -f $IMAGE_FILE_PATH ]]; then
        echo -e "${lightred}\nERROR: Missing file: IMAGE_FILE_PATH\n${nc}";
        usage;
        exit 1;
    fi

    if [[ -z $OUTPUT_DIR_PATH ]]; then
        mkdir -p $CURR_DIR/bootimg;
        OUTPUT_DIR_PATH="$CURR_DIR/bootimg";
    fi

    if [[ ! -d $OUTPUT_DIR_PATH ]]; then
        mkdir -p $OUTPUT_DIR_PATH;
    fi

    # Unpack
    bash $AIK/unpackimg.sh $IMAGE_FILE_PATH;

    # Move unpacked stuff to chosen output dir
    rm -rf $OUTPUT_DIR_PATH/ramdisk $OUTPUT_DIR_PATH/split_img;
    mv $AIK/ramdisk $OUTPUT_DIR_PATH;
    mv $AIK/split_img $OUTPUT_DIR_PATH;

    echo -e "${lightgreen}\nExtracted to $OUTPUT_DIR_PATH\n${nc}";
}

boot_repack() {
    if [[ ! -d "$UNPACKED_IMG_DIR/ramdisk" && ! -d "$UNPACKED_IMG_DIR/split_img" ]]; then
        echo -e "${lightred}\nERROR: Missing/Incorrect bootimg dir: $UNPACKED_IMG_DIR\n${nc}";
        usage;
        exit 1;
    fi

    if [[ -z $OUTPUT_IMG_PATH ]]; then
        OUTPUT_IMG_PATH="$CURR_DIR/boot_new.img";
    fi

    # Move dirs to AIK for operations
    mv $UNPACKED_IMG_DIR/ramdisk $AIK/;
    mv $UNPACKED_IMG_DIR/split_img $AIK/;

    # Repack the image
    bash $AIK/repackimg.sh;

    # Move the dirs and new image back
    mv $AIK/ramdisk $UNPACKED_IMG_DIR/;
    mv $AIK/split_img $UNPACKED_IMG_DIR/;
    mv $AIK/image-new.img $OUTPUT_IMG_PATH;

    # Cleanup
    bash $AIK/cleanup.sh;

    echo -e "${lightgreen}\nRepacked bootimg: $OUTPUT_IMG_PATH\n${nc}";
}

# Setup getopt.
long_opts="help,unpack,repack;"
getopt_cmd=$(getopt -o hur --long "$long_opts" \
            -n $(basename $0) -- "$@") || \
            { echo -e "${yellow}\nERROR: Getopt failed. Extra args\n${nc}"; usage; exit 1;}

eval set -- "$getopt_cmd"

while true; do
    case "$1" in
        -h|--help) usage; exit 0;;
        -u|--unpack) IMAGE_FILE_PATH=$(readlink -f "$3"); OUTPUT_DIR_PATH=$(readlink -f "$4"); boot_unpack; break;;
        -r|--repack) UNPACKED_IMG_DIR=$(readlink -f "$3"); OUTPUT_IMG_PATH=$(readlink -f "$4"); boot_repack; break;;
        --)
        # When no of the opt is specified, auto-detect .img or boot dir presence
        if [[ $2 == *.img ]]; then
            IMAGE_FILE_PATH=$(readlink -f "$2");
            OUTPUT_DIR_PATH=$(readlink -f "$3");
            boot_unpack;
        elif [[ -d "$2" ]]; then
            UNPACKED_IMG_DIR=$(readlink -f "$2");
            OUTPUT_IMG_PATH=$(readlink -f "$3");
            boot_repack;
        fi
        shift; break;;
    esac
    shift
done
