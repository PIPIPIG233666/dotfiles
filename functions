#!/usr/bin/env bash

# Script defining various functions used in the scripts across this repository
source ~/.dotfiles/aliases

function upinfo () {
    echo -ne "${yellow}$(hostname) ${lightred}uptime is ${lightblue} \t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10}'
}

function onLogin() {
    clear
    if [[ $(command -v figlet) ]]; then echo -e "${LIGHTGRAY}";figlet "TheStrix"; fi
    echo -ne "${lightred}Today is:\t\t${lightblue}" `date`; echo ""
    echo -e "${lightred}Kernel Information: \t${lightblue}" `uname -smr`
    echo -ne "${cyan}";upinfo;echo -e "${nc}"
}

function batteryhistorian() {
    echo -e "${lightgreen}Running historian...${nc}"
    echo -e "${yellow}Visit http://localhost:9999${nc}"
    cd $GOPATH/src/github.com/google/battery-historian
    go run cmd/battery-historian/battery-historian.go 
}

# ssh
function sshtimeout () {
    eval "$(ssh-agent -t 45m)"
    ssh-add ~/.ssh/id_rsa
}

# FORMATS THE TIME
function format_time() {
    MINS=$(((${1}-${2})/60))
    SECS=$(((${1}-${2})%60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

# Creates a virtualenv if required and activates it
function venv() {
    PYV=$(python -c "import sys;t='{v[0]}'.format(v=list(sys.version_info[:1]))\
            ;sys.stdout.write(t)")
    if [[ "${PYV}" == "3" ]]; then
        if [[ "$(command -v 'virtualenv2')" ]]; then
            [[ -f "/tmp/venv/bin/activate" ]] || virtualenv2 /tmp/venv
            source /tmp/venv/bin/activate
        else
            echo "Please install 'virtualenv2', or make 'python' point to \
                    python2"
        fi
    fi
}

# Deactivates a virtualenv and deletes the folder
function rmvenv() {
    if [[ -d "/tmp/venv/" ]]; then
        deactivate
        rm -rf /tmp/venv
    fi
}

# Calls venv(), runs the given command, and then calls rmvenv()
function run_virtualenv() {
    venv

    "$@"

    [[ -d "/tmp/venv" ]] && deactivate
}

# Some git aliases for an easier workflow
function gitalias() {
    git config --global alias.s 'status'
    git config --global alias.p 'push'
    git config --global alias.pl 'pull'
    git config --global alias.f 'fetch'
    git config --global alias.r 'remote'
    git config --global alias.rv 'remote --verbose'
    git config --global alias.ru 'remote update'
    git config --global alias.rrm 'remote remove'
    git config --global alias.rsu 'remote set-url'
    git config --global alias.ra 'remote add'
    git config --global alias.rev 'revert'
    git config --global alias.re 'reset'
    git config --global alias.cp 'cherry-pick'
    git config --global alias.cpc 'cherry-pick --continue'
    git config --global alias.cpa 'cherry-pick --abort'
    git config --global alias.rh 'reset --hard'
    git config --global alias.rs 'reset --soft'
    git config --global alias.rb 'rebase'
    git config --global alias.rbi 'rebase --interactive'
    git config --global alias.rbc 'rebase --continue'
    git config --global alias.rba 'rebase --abort'
    git config --global alias.rbs 'rebase --skip'
    git config --global alias.d 'diff'
    git config --global alias.dc 'diff --cached'
    git config --global alias.b 'bisect'
    git config --global alias.c 'commit'
    git config --global alias.cs 'commit --signoff'
    git config --global alias.ca 'commit --amend'
    git config --global alias.cn 'commit --no-edit'
    git config --global alias.gerrit 'push gerrit HEAD:refs/for/pie'
    git config --global alias.add-change-id "!EDITOR='sed -i -re s/^pick/e/' sh -c 'git rebase -i $1 && while test -f .git/rebase-merge/interactive; do git commit --amend --no-edit && git rebase --continue; done' -"
}

# Repo sync with various flags I'm lazy to type each time
function syncc() {
    time repo sync --force-broken --force-sync --no-clone-bundle\
             --current-branch --no-tags "$@"
}

# Download a file given the Google Drive URL
function gdrivedl {
    local CONFIRM FILE_ID URL; URL="${1}"; shift
    if [[ "${URL:?}" =~ folders ]]; then
        FILE_ID="$(echo "${URL}" | sed -r -e 's/https.*folders\/(.*)/\1/' -e 's/(.*)\?usp=sharing/\1/')"
    else
        FILE_ID="$(echo "${URL:?}" | sed -r -e 's/(.*)&export.*/\1/' -e 's/https.*id=(.*)/\1/' -e 's/https.*\/d\/(.*)\/view/\1/')"
    fi
    CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://docs.google.com/uc?export=download&id=$FILE_ID" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
    aria2c --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$FILE_ID"
    rm -rf /tmp/cookies.txt
}
